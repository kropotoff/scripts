const request = require("request");
const EventEmitter = require('events');
var RGchangerEmit = RGchangerEmit || new EventEmitter();
var subdomain = '';
var Cookie = '';
var ringGroups = [];
var numberIdArray = [];
var numberBody = [];
var responseMessage = ""
var put200array = []
var getFailCounter = [];
var putFailCounter = [];
var headers = {
    'accept': 'application/json, text/javascript, */*; q=0.01',
    'Cookie': Cookie,
    'x-requested-with': 'XMLHttpRequest',
};
var optionsGetNumber = {
  method: 'GET',
  url: 'https://redacted.mytalkdesk.com/phones/57bb6abede4f8565ff029b5d',
  headers: headers
};
var optionsPutNumber = {
  method: 'PUT',
  url: 'https://redacted.mytalkdesk.com/phones/57bb6abede4f8565ff029b5d',
  headers: headers,
  body: [],
  json: true
};
var begugArray = []


//sets initial variables comming from the UI calls getAndCreateArray
function initialize (acc, auth, RG, ids){
  subdomain = acc;
  Cookie = `_talkdesk_session=${auth}`;
  headers.Cookie = Cookie;
  ringGroups = RG.split(",");
  numberIdArray = ids.split(",");
  getAndCreateArray(numberIdArray);
};

//GET's numbers corresponding to the ID's on the numberIdArray
function getAndCreateArray (numberIdArray){
for (x in numberIdArray){
  optionsGetNumber.url = `https://${subdomain}.mytalkdesk.com/phones/${numberIdArray[x]}`
  console.log(optionsGetNumber);
  request(optionsGetNumber, callbackGetNumber);
  };
};

//callback function of GET numbers
function callbackGetNumber(error, response, body) {
  if(!error &&  response.statusCode == 200){
    console.log('type');
    numberBody.push(JSON.parse(body));
    begugArray.push(1);
    console.log(begugArray);
    console.log(response.statusCode);
    if (body == 'null'){
      console.log(numberBody.length);
      responseMessage = `Aborting, invalid id position ${numberBody.length + 1 }`;
      restartVars(); //enging path
      RGchangerEmit.emit('RGchangerEmit', responseMessage);
    }else if (numberBody.length === numberIdArray.length){
      console.log(`looparraynext`);
      loopArrayPut(numberBody); //happy path
    };
  } else if(response.statusCode == 403){
    getFailCounter.push(403);
    console.log(getFailCounter);
    console.log(getFailCounter.length);
    console.log(numberIdArray.length);
    if (getFailCounter.length == numberIdArray.length){
    responseMessage = 'GET cookie invalid or expired';
    console.log(`GET cookie invalid or expired`);
    restartVars() //ending path
    RGchangerEmit.emit('RGchangerEmit', responseMessage);
  };
  } else {
    getFailCounter.push('GET unknown');
    console.log(`get callback error ${error}`);
    if (getFailCounter.length == numberIdArray.length){
    responseMessage = 'error getting numbers, verify subdomain or talk to your developer'
    RGchangerEmit.emit('RGchangerEmit', responseMessage);
    restartVars(); //ending path
  };
  };
};

//this loop goes trought the number bodys, makes the necessary changes to the
//HTTP headers and body (adds ring groups), and calls the request(PUT)
function loopArrayPut (numberBody){
console.log('entering loop array');
for (x in numberBody){
  if(numberBody[x] != null){
  numberBody[x].tags = numberBody[x].tags.concat(ringGroups);
  numberBody[x].ring_group_names = numberBody[x].ring_group_names.concat(ringGroups);
  optionsPutNumber.url = `https://${subdomain}.mytalkdesk.com/phones/${numberBody[x]._id}`
  optionsPutNumber.body = numberBody[x];
  request(optionsPutNumber, callbackPutNumber);
}else {
  put200array.push(null);
}
  };
};

//callback function of PUT numbers, happy path keeps track of number of successful PUTs for responseMessagemessage
function callbackPutNumber(error, response, body) {
  if(!error && (response.statusCode == 200 || response.statusCode ==204)){
    console.log(response.statusCode);
    put200array.push(200);
    console.log(put200array);
    if (numberBody.length === put200array.length){
      console.log(`done`);
      var filtered = put200array.filter(function (el) {
        return el != null;
      });
      responseMessage = `done, ${filtered.length} numbers updated, still verify `;
      restartVars(); // happy path
      RGchangerEmit.emit('RGchangerEmit', responseMessage);
    };

  }else if(error){
    put200array.push(200);
    if (numberBody.length === put200array.length){
    console.log(`put callback error ${error}`);
    responseMessage = `PUT Error, ${error} `;
    restartVars();//ending path
    RGchangerEmit.emit('RGchangerEmit', responseMessage);
  };
  } else if (response.statusCode == 403) {
    put200array.push(200);
    if (numberBody.length === put200array.length){
      console.log(` PUT cookie invalid or expired`);
    responseMessage = `PUT cookie invalid or expired `;
    restartVars();
    RGchangerEmit.emit('RGchangerEmit', responseMessage);
  };

  } else {

    ut200array.push(200);
    if (numberBody.length === put200array.length){
      console.log(` PUT unknown error`);
    responseMessage = `PUT PUT unknown error `;
    restartVars();
    RGchangerEmit.emit('RGchangerEmit', responseMessage);
  };
  };
};

function restartVars() {
   ringGroups = [];
   numberIdArray = [];
   numberBody = [];
   put200array = []
   getFailCounter = [];
   putFailCounter = [];
   begugArray = [];
};

module.exports = {
  "initialize": initialize,
  "RGchangerEmit": RGchangerEmit
};
